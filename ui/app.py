import os, sys
import streamlit as st

# –ø–æ–¥–∫–ª—é—á–∞–µ–º backend-–ø–∞–∫–µ—Ç—ã
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from backend.dedupe import find_duplicate_groups
from backend.archive import get_photos_by_date, organize_photos, MONTH_NAMES

st.set_page_config(page_title="–§–æ—Ç–æ–∞—Ä—Ö–∏–≤365 Light")
st.title("–§–æ—Ç–æ–∞—Ä—Ö–∏–≤365 Light")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if 'dupe' not in st.session_state:
    st.session_state.dupe = {}
if 'archive' not in st.session_state:
    st.session_state.archive = {}
if 'to_delete' not in st.session_state:
    st.session_state.to_delete = set()

folder_input = st.text_input("–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", ".")
folder = folder_input.strip().strip('"').strip("'")

if st.button("–ê–Ω–∞–ª–∏–∑"):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è session_state
    raw_dupe_groups = find_duplicate_groups(folder, threshold=0)
    processed_dupe_groups = {}
    for cluster in raw_dupe_groups:
        if len(cluster) > 1: # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (–±–æ–ª—å—à–µ 1 —Ñ–∞–π–ª–∞)
            representative_hash = str(cluster[0][1]) # –•–µ—à –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫–∞–∫ –∫–ª—é—á
            file_paths = [f for f, _ in cluster] # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
            processed_dupe_groups[representative_hash] = file_paths

    st.session_state.dupe = processed_dupe_groups
    st.session_state.archive = get_photos_by_date(folder)
    st.session_state.to_delete.clear() # –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª—ã –ø—Ä–∏ –Ω–æ–≤–æ–º –∞–Ω–∞–ª–∏–∑–µ

# –°–µ–∫—Ü–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
if st.session_state.get('dupe'):
    st.header("–î—É–±–ª–∏–∫–∞—Ç—ã")
    clusters = st.session_state.dupe
    st.write(f"–ù–∞–π–¥–µ–Ω–æ {len(clusters)} –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
    for cluster_hash, cluster_files in clusters.items():
        st.write(f"### –ì—Ä—É–ø–ø–∞: {cluster_hash}")
        cols = st.columns(2)
        for idx, path in enumerate(cluster_files):
            with cols[idx % 2]:
                st.image(path, width=200)
                name = os.path.basename(path)
                key = f"dup_del_{path}"
                if st.checkbox(f"–£–¥–∞–ª–∏—Ç—å {name}", key=key):
                    st.session_state.to_delete.add(path)
                else:
                    st.session_state.to_delete.discard(path)
    if st.session_state.to_delete and st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"):
        removed = 0
        for f in list(st.session_state.to_delete):
            try:
                os.remove(f)
                removed += 1
            except Exception as e:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {os.path.basename(f)}: {e}")
        st.success(f"–£–¥–∞–ª–µ–Ω–æ {removed} —Ñ–∞–π–ª–æ–≤")
        st.session_state.dupe = {} # –û—á–∏—â–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        st.session_state.to_delete.clear()

# –°–µ–∫—Ü–∏—è –∞—Ä—Ö–∏–≤–∞ –ø–æ –¥–∞—Ç–∞–º
if st.session_state.get('archive'):
    st.header("–ê—Ä—Ö–∏–≤ –ø–æ –¥–∞—Ç–µ")
    if st.button("üìÅ –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –ø–æ –ø–∞–ø–∫–∞–º", help="–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫–∏ –ì–æ–¥/–ú–µ—Å—è—Ü –∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ç—É–¥–∞ —Ñ–æ—Ç–æ"):
        organize_photos(folder)
        st.success("–§–∞–π–ª—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –ø–∞–ø–∫–∏ –ì–æ–¥/–ú–µ—Å—è—Ü")
    for year in sorted(st.session_state.archive.keys(), reverse=True):
        with st.expander(f"{year}"):
            for month_num in sorted(st.session_state.archive[year].keys()):
                month_name = MONTH_NAMES.get(month_num, month_num)
                st.subheader(month_name)
                photos = st.session_state.archive[year][month_num]
                cols = st.columns(4)
                for i, path in enumerate(photos):
                    with cols[i % 4]:
                        st.image(path, width=150)
                        st.caption(os.path.basename(path)) 