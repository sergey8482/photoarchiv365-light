import os, sys
import streamlit as st

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from backend.dedupe import find_duplicate_groups
from backend.archive import get_photos_by_date, organize_photos, MONTH_NAMES

st.set_page_config(page_title="–§–æ—Ç–æ–∞—Ä—Ö–∏–≤365 Light")
st.title("–§–æ—Ç–æ–∞—Ä—Ö–∏–≤365 Light")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏
if 'folder' not in st.session_state:
    st.session_state.folder = os.getcwd()

# –ü–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä)
st.sidebar.header("–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø–∞–ø–∫–∞–º")
current = st.sidebar.text_input("–¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞", st.session_state.folder)
st.sidebar.write("–ü–æ–¥–ø–∞–ø–∫–∏:")
try:
    subdirs = [d for d in os.listdir(current) if os.path.isdir(os.path.join(current, d))]
except Exception:
    subdirs = []
choice = st.sidebar.selectbox("–ü–µ—Ä–µ–π—Ç–∏ –≤", [".."] + subdirs)
if st.sidebar.button("–ñ–º–∏ –ø–µ—Ä–µ–π—Ç–∏"):
    if choice == "..":
        new_folder = os.path.dirname(current)
    else:
        new_folder = os.path.join(current, choice)
    st.session_state.folder = new_folder

st.sidebar.write(f"**–í—ã–±—Ä–∞–Ω–æ:** {st.session_state.folder}")

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
if st.button("üîç –ê–Ω–∞–ª–∏–∑"):
    folder = st.session_state.folder
    st.session_state.dupe = find_duplicate_groups(folder, threshold=0)
    st.session_state.archive = get_photos_by_date(folder)
    st.session_state.to_delete = set()

# –†–∞–∑–¥–µ–ª ¬´–î—É–±–ª–∏–∫–∞—Ç—ã¬ª
if st.session_state.get('dupe'):
    st.header("–î—É–±–ª–∏–∫–∞—Ç—ã")
    for i, cluster in enumerate(st.session_state.dupe.values(), start=1):
        with st.expander(f"–î—É–±–ª–∏–∫–∞—Ç—ã ‚Ññ{i} ‚Äî {len(cluster)} —Ñ–æ—Ç–æ", expanded=False):
            st.image(cluster[0], width=300, caption=os.path.basename(cluster[0]))
            rest = cluster[1:]
            if rest:
                cols = st.columns(len(rest))
                for idx, path in enumerate(rest):
                    with cols[idx]:
                        st.image(path, width=150, caption=os.path.basename(path))
            if st.button(f"–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã ‚Ññ{i}", key=f"del_all_{i}"):
                removed = 0
                for p in rest:
                    os.remove(p)
                    removed += 1
                st.success(f"–£–¥–∞–ª–µ–Ω–æ {removed} —Ñ–∞–π–ª–æ–≤")
                # –æ–±–Ω–æ–≤–ª—è–µ–º state
                key = list(st.session_state.dupe.keys())[i-1]
                st.session_state.dupe.pop(key)

# –†–∞–∑–¥–µ–ª ¬´–ê—Ä—Ö–∏–≤ –ø–æ –¥–∞—Ç–µ¬ª
if st.session_state.get('archive'):
    st.header("–ê—Ä—Ö–∏–≤ –ø–æ –¥–∞—Ç–µ")
    if st.button("üìÅ –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –ø–æ –ø–∞–ø–∫–∞–º"):
        organize_photos(st.session_state.folder)
        st.success("–§–∞–π–ª—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –ø–∞–ø–∫–∏ –ì–æ–¥/–ú–µ—Å—è—Ü")
    for year in sorted(st.session_state.archive.keys(), reverse=True):
        with st.expander(f"{year}", expanded=False):
            for month_num in sorted(st.session_state.archive[year].keys()):
                month_name = MONTH_NAMES.get(month_num, month_num)
                st.subheader(month_name)
                photos = st.session_state.archive[year][month_num]
                cols = st.columns(4)
                for j, path in enumerate(photos):
                    with cols[j % 4]:
                        st.image(path, width=150)
                        st.caption(os.path.basename(path)) 